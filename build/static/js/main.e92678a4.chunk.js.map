{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","href","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","imageSrc","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e92678a4.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render(){\n        const {business} = this.props;\n        return(\n        <div className=\"Business\">\n            {/* the image(s) that shows up when a search is made */}\n            <div className=\"image-container\">\n                <img src='https://www.preppywallpapers.com/wp-content/uploads/2017/01/Pantone-2017-Hazelnut-iphone-wallpaper.jpg' alt='businessplace'/>\n            </div>\n            <h2>{business.name}</h2>\n            <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                    <p>{business.address}</p>\n                    <p>{business.city}</p>\n                    <p>{business.state} {business.zipCode}</p>\n                </div>\n                <div className=\"Business-reviews\">\n                    <h3>{business.category}</h3>\n                    <h3 className=\"rating\">{business.rating} stars</h3>\n                    <p>{business.reviewCount} reviews</p>\n                </div>\n            </div>\n        </div>\n        );\n    }\n};\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business'; /*Importing the Business Component*/\n\nclass BusinessList extends React.Component {\n    render(){\n        return( /* Iterate through array and return Business components */\n            <div className=\"BusinessList\">\n            {\n                this.props.businesses.map(business => {\n                    return <Business business={business} key={business.id}/>;\n                })\n            }\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = { /*initial state of SearchBar*/\n            term:'',\n            location:'',\n            sortBy:'best_match'\n        }\n        /*Using Yelp API*/\n        this.sortByOptions = {\n            'Best Match': 'best_match', /*The Default*/\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        }\n        this.handleTermChange=this.handleTermChange.bind(this);\n        this.handleLocationChange=this.handleLocationChange.bind(this);\n        this.handleSearch=this.handleSearch.bind(this);\n    }\n\n    /* Provides visual feedback to users */\n    getSortByClass(sortByOption){\n        if(this.state.sortBy === sortByOption){\n            return 'active';\n        }\n        else{\n            return '';\n        }\n    };\n\n    handleSortByChange(sortByOption){\n        this.setState({\n            sortBy: sortByOption\n        });\n    }\n\n    handleTermChange(event){\n        this.setState({\n            term: event.target.value\n        });\n    }\n\n    handleLocationChange(event){\n        this.setState({\n            location: event.target.value\n        });\n    }\n\n    handleSearch(event){\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault(); /* Prevents the (anchor tag) default of clicking a link at the end of a method */\n    }\n\n    /*Creates List Items Needed to Display the Sorting Options*/\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            \n            /*sortByOption = the sortByOptions keys*/\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return (<li \n                    key={sortByOptionValue} \n                    className={this.getSortByClass(sortByOptionValue)} \n                    onClick={this.handleSortByChange.bind(this,sortByOptionValue)}>\n                        {sortByOption}\n            </li>);\n        });\n    \n    };\n\n    render() {\n        return (\n            /*Code Generally Given by Codecademy*/\n            <div className=\"SearchBar\">\n            <div className=\"SearchBar-sort-options\">\n                <ul>\n                    {this.renderSortByOptions()} \n                </ul>\n            </div>\n            <div className=\"SearchBar-fields\">\n                <input placeholder=\"Search Businesses\" onChange={this.handleTermChange}/>\n                <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\n            </div>\n            <div className=\"SearchBar-submit\">\n                <a href=\"www.#.com\" onClick={this.handleSearch}>Let's Go</a>\n            </div>\n            </div>\n        );\n    };\n};\n\n\nexport default SearchBar;\n\n","const apiKey = 'k__fzdZrt0jSWpP5hcGXRL_QSPOCvaOxYylX1_mwmYvZqFUvgx_lhICi4h7M0bUlsiFQRwVmVTuqTf36TmoETQ-33bvUTlV_Mx1tq_P1z7WFLyz4aM5tbP_Mzb5vXXYx';\n\nlet Yelp = {\n    search(term, location, sortBy) {\n        /*CORS Anywhere - bypasses CORS restrictions ... needs temporary access to demo server... then works*/\n        // By January 31st, 2021, cors-anywhere.herokuapp.com will stop serving as an open proxy\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}` /*Form of Identification; API key used as browser header */\n            }\n        })\n        .then(response => {\n            return response.json(); /*Returning returned response to JSON */\n        })\n        .then(jsonResponse => {\n            if (jsonResponse.businesses){\n                return jsonResponse.businesses.map(business => {\n                    return {\n                        /* Found in Yelp API /businesses/search */\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories[0].title,\n                        rating: business.rating,\n                        reviewCount: business.review_count\n                    };\n                });\n            } \n        }); \n    }\n};\n\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n/* Hard Code: Keys & Values Given by Codecademy */\n/*const business = { \n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'yummer in the tummer',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n};\nconst businesses = [business,business,business,business,business,business]; */\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp=this.searchYelp.bind(this);\n  }\n  \n  searchYelp(term, location, sortBy){\n    Yelp.search(term, location, sortBy)\n    .then(businesses => {\n      this.setState({businesses: businesses});\n    });\n  }\n  render(){\n    return ( \n      <div className=\"App\">\n      <h1>craveus</h1> {/* top bar */}\n      <SearchBar searchYelp={this.searchYelp}/>\n      <BusinessList businesses={this.state.businesses}/> \n      </div>\n    );\n  }\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}